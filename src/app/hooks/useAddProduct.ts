import { useState } from "react";
import { Product, Variation, VariationImageBlob } from "@/types/product";

export const useNewProduct = () => {
  const [product, setProduct] = useState<Product>({
    product_id: "", // This will be generated by the backend
    name: "",
    description: "",
    brand: "",
    category: "",
    variations: [],
    specifications: {},
    review_ids: [], // This will likely be empty for a new product
    rating: 0, // This will likely be 0 for a new product
  });
  const [imagesUpload, setImagesUpload] = useState<VariationImageBlob[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const uploadProductImage = async (image: Blob): Promise<string> => {
    const formData = new FormData();
    formData.append("image", image, "product_image.jpg");

    try {
      const response = await fetch(
        "http://127.0.0.1:8080/api/v1/product/image",
        {
          method: "POST",
          body: formData,
        }
      );
      if (!response.ok) {
        throw new Error("Failed to upload image");
      }
      const data = await response.json();
      return data.filename;
    } catch (error) {
      console.error("Error uploading image:", error);
      throw error;
    }
  };

  const prepareProductForCreation = async (): Promise<Product> => {
    if (imagesUpload.length === 0) {
      return product;
    }

    let preparedProduct = { ...product };

    for (const variant of imagesUpload) {
      const uploadedImageIds = await Promise.all(
        variant.images.map((image) => uploadProductImage(image))
      );
      
      const updatedVariations = preparedProduct.variations.map((v) =>
        v.sku === variant.variant ? { ...v, images: uploadedImageIds } : v
      );
      
      preparedProduct = { ...preparedProduct, variations: updatedVariations };
    }

    return preparedProduct;
  };

  const createProduct = async (addpProduct: Product) => {
    try {
      setLoading(true);
    //   const preparedProduct = await prepareProductForCreation();
    console.log(addpProduct);

      await createProductApi(addpProduct);
    //   setImagesUpload([]);
    //   // Reset the product state or handle success as needed
    //   setProduct({
    //     product_id: "",
    //     name: "",
    //     description: "",
    //     brand: "",
    //     category: "",
    //     variations: [],
    //     specifications: {},
    //     review_ids: [],
    //     rating: 0,
    //   });
    } catch (error) {
      console.error("Error creating product:", error);
      setError("Failed to create product. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const createProductApi = async (newProduct: Product) => {
    const response = await fetch(`http://127.0.0.1:8080/api/v1/product`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(newProduct),
    });
    if (!response.ok) {
      throw new Error("Failed to create product");
    }
    const createdProduct = await response.json();
    return createdProduct;
  };

  const addVariation = (variation: Variation) => {
    setProduct(prev => ({
      ...prev,
      variations: [...prev.variations, variation]
    }));
  };

  const removeVariation = (sku: string) => {
    setProduct(prev => ({
      ...prev,
      variations: prev.variations.filter(v => v.sku !== sku)
    }));
  };

  const updateProductField = (field: keyof Product, value: any) => {
    setProduct(prev => ({ ...prev, [field]: value }));
  };

  return {
    product,
    imagesUpload,
    loading,
    error,
    createProduct,
    setProduct,
    setImagesUpload,
    addVariation,
    removeVariation,
    updateProductField,
  };
};